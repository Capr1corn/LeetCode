/*
We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

Example 1:
Input: 
asteroids = [5, 10, -5]
Output: [5, 10]
Explanation: 
The 10 and -5 collide resulting in 10.  The 5 and 10 never collide.
Example 2:
Input: 
asteroids = [8, -8]
Output: []
Explanation: 
The 8 and -8 collide exploding each other.
Example 3:
Input: 
asteroids = [10, 2, -5]
Output: [10]
Explanation: 
The 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.
Example 4:
Input: 
asteroids = [-2, -1, 1, 2]
Output: [-2, -1, 1, 2]
Explanation: 
The -2 and -1 are moving left, while the 1 and 2 are moving right.
Asteroids moving the same direction never meet, so no asteroids will meet each other.
Note:

The length of asteroids will be at most 10000.
Each asteroid will be a non-zero integer in the range [-1000, 1000]..



这道题用一个数组来模拟行星碰撞，正数代表行星向右移动，负数表示向左移动，绝对值大小表示行星的质量，
如果两个相邻的行星相向移动会碰撞，质量大的行星会完好无损的保存，质量小的就会灰飞烟灭。
*/


思路：

由于小于0的小行星往左移动，大于0的小行星往右移动，所以只有在左边的小行星往右移动，而右边的小行星往左移动的情况下，两者才可能发生相撞而爆炸。因此，我们定义一个堆栈，当且仅当栈顶元素大于0，并且当前元素小于0的时候，两者就会相撞，所以我们计算相撞后哪个小行星爆炸了：如果是栈顶的爆炸了，那么需要出栈，并且循环检查当前小行星还会不会和新的栈顶元素相撞；如果是当前小行星爆炸了，则不用做什么；如果是两个小行星同时爆炸了，则需要出栈，并且跳出循环检测。

在算法实现中，我们用vector<int>来模拟堆栈，这样便于直接返回。算法的空间复杂度是O(n)，时间复杂度也是O(n)。

代码实现：
class Solution {  
public:  
    vector<int> asteroidCollision(vector<int>& asteroids) {  
        if (asteroids.size() == 0) {  
            return {};  
        }  
        vector<int> st;  
        for (int i = 0; i < asteroids.size(); ++i) {  
            int value = asteroids[i];  
            while (!st.empty() && st.back() > 0 && value < 0) {  
                int sign = st.back() + value;  
                if (sign > 0) {         // the left moving asteroid explodes  
                    value = st.back();  
                }  
                else if (sign == 0) {   // both asteroids explode  
                    value = 0;  
                }  
                st.pop_back();  
            }  
            if (value != 0) {  
                st.push_back(value);  
            }  
        }  
        return st;  
    }  
};  




代码2:
class Solution {
public:
    vector<int> asteroidCollision(vector<int>& asteroids) {
         vector<int> ans;
        for (int num : asteroids) {
            if (num < 0) {
                while(ans.size() && ans.back() > 0 && ans.back() < -num) {
                    ans.pop_back();
                }
                if (ans.size() == 0 || ans.back() < 0) ans.push_back(num);
                if (ans.back() == -num) ans.pop_back();
            } else ans.push_back(num);
        }
        return ans;
    }
};