/*
Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.

Note:
The number of people is less than 1,100.


Example

Input:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

Output:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
*/


解析：
这道题给了我们一个队列，队列中的每个元素是一个pair，分别为身高和前面身高不低于当前身高的人的个数，让我们重新排列队列，使得每个pair的第二个参数都满足题意。首先我们来看一种超级简洁的方法，不得不膜拜想出这种解法的大神。首先我们给队列先排个序，按照身高高的排前面，如果身高相同，则第二个数小的排前面。然后我们新建一个空的数组，遍历之前排好序的数组，然后根据每个元素的第二个数字，将其插入到res数组中对应的位置，


代码解析：
第一步是排序，排序的规则跟我自己想的是反过来了，即 
我们给队列先排个序，按照身高高的排前面，如果身高相同，则第二个数小的排前面。
people： 
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] 
排序后： 
[[7,0], [7,1], [6,1], [5,0], [5,2], [4,4]] 
然后从数组people第一个元素开始，放入到数组result中，放入的位置就是离result开始位置偏移了元素第二个数字后的位置。如下： 
1. 
people: [7,0] 
插入到离开始位置偏移了0个距离的位置。 
result: [[7,0]] 
2. 
people: [7,1] 
插入到离开始位置偏移了1个距离的位置，即插入到[7,0]的后面。 
result: [[7,0], [7,1]] 
3. 
people: [6,1] 
插入到离开始位置偏移了1个距离的位置，即插入到[7,0]的后面。 
result: [[7,0], [6,1], [7,1]] 
4. 
people: [5,0] 
插入到离开始位置偏移了0个距离的位置，即插入到[7,0]的前面。 
result: [[5,0], [7,0], [6,1], [7,1]] 
5. 
people: [5,2] 
插入到离开始位置偏移了2个距离的位置，即插入到[7,0]的后面。 
result: [[5,0], [7,0], [5,2], [6,1], [7,1]] 
5. 
people: [4,4] 
插入到离开始位置偏移了4个距离的位置，即插入到[6,1]的后面。 
result: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

这种算法体现了元素第二个数字与其插入位置的关系，所以通过简单的一个for循环就可以搞定。



class Solution {
public:
    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {
        sort(people.begin(),people.end(),[](const pair<int,int>&a ,const pair<int ,int >&b){
            return a.first>b.first||(a.first==b.first&&a.second<b.second);
        });
        
        
        vector<pair<int,int>> res;
        for(auto a:people){
            res.insert(res.begin()+a.second,a);
        }
        return res;
    }
};