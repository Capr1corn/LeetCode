/*Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree 
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.*/
算法解析：
对根节点递归计算左右子树的Diameter，通过和类内的变量 diameter 进行比较，保存较大值。
在每一次递归结束后，返回这棵子树的深度，根节点获取了左右子树的深度后，将二者相加就是该根节点下的Diameter。

二叉树的直径：二叉树中从一个结点到另一个节点最长的路径，叫做二叉树的直径
采用分治和递归的思想：根节点为root的二叉树的直径 = max(root-left的直径，root->right的直径，root->left的最大深度+root->right的最大深度+1)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

 
class Solution {
public:
    int maxDepth = 0;
    
    int getMaxDepth(TreeNode* root){
        if (!root) return 0;
        
        int leftDepth = getMaxDepth(root->left);
        int rightDepth = getMaxDepth(root->right);
        
        maxDepth = (leftDepth + rightDepth > maxDepth ) ? leftDepth + rightDepth : maxDepth;
        
        return max(leftDepth +1, rightDepth+1); //返回左右子树中深度最大的
        
    }
    int diameterOfBinaryTree(TreeNode* root) {
        getMaxDepth(root);
        return maxDepth;
    }
};