/*
Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.

Example 1:

Input: "2-1-1"
Output: [0, 2]
Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2
Example 2:

Input: "2*3-4*5"
Output: [-34, -14, -10, -10, 10]
Explanation: 
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10



这道题让给我们一个可能含有加减乘的表达式，
让我们在任意位置添加括号，求出所有可能表达式的不同值。用递归来解，划分左右子树，递归构造。
*/


代码：
class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        vector<int> res;
        for(int i=0;i<input.size();++i){ 
        //通过for循环，通过if判断将字符串分成多份
            if(input[i]=='+'||input[i]=='-'||input[i]=='*'){
                vector<int> left=diffWaysToCompute(input.substr(0,i));
                vector<int> right=diffWaysToCompute(input.substr(i+1));
                for(int j=0;j<left.size();++j){
                    for(int k=0;k<right.size();++k){
                        if(input[i]=='+')res.push_back(left[j]+right[k]);
                        else if(input[i]=='-')res.push_back(left[j]-right[k]);
                        else res.push_back(left[j]*right[k]);
                    }
                }
            }
        }
        if(res.empty())res.push_back(atoi(input.c_str()));
        return res;
    }
};